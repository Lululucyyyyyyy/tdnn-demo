import torch
from tdnn import TDNN as TDNNLayer
import torch.nn as nn
import torch.optim as optim
import matplotlib.pyplot as plt
import numpy as np
from mytools import *

class TDNNv1(nn.Module):
    def __init__(self):
        super(TDNNv1, self).__init__()

        self.tdnn1 = TDNNLayer(16, 8, [-1,0,1])
        self.sigmoid1 = nn.Sigmoid()
        self.tdnn2 = TDNNLayer(8, 3, [-2,0,2])
        self.sigmoid2 = nn.Sigmoid()
        self.flatten = nn.Flatten()
        self.linear = nn.Linear(27, 3)
        self.network = nn.Sequential(
            self.tdnn1,
            self.sigmoid1,
            self.tdnn2,
            self.sigmoid2,
            self.flatten,
            self.linear,
        )

    def forward(self, x):
        out = self.network(x)
        return out

logged = True
normed = False

# dat = []
# dat_lab = []
# fs = []
# load_file('ba00000-300.txt', 0, 'b', 'dataset9/', dat, dat_lab, fs)
# # print(np.array(dat).shape)
# data = dat[0]

data =   [[-77.2591476, -82.6536484, -82.6536484, -78.1133118, -77.6613464, -80.0858917, -77.353363 , -73.4475555, -73.4475555, -73.0946274, -71.8656158, -72.7873001, -76.2597122, -77.0130844, -77.0130844],
      [-60.0553513, -60.1462326, -60.1462326, -61.3791695, -60.8712845, -62.6382751, -61.206665 , -55.4697723, -55.4697723, -53.937851 , -53.0054474, -52.7290993, -54.7812462, -56.986393 , -56.986393 ],
      [-57.9799728, -65.4649124, -65.4649124, -67.4235992, -68.1710052, -64.9792404, -61.8277512, -57.250061 , -57.250061 , -55.5142555, -54.7354164, -53.32658  , -53.564106 , -56.1230583, -56.1230583],
      [-66.2286148, -75.9259338, -75.9259338, -72.5533981, -72.5555725, -72.7155762, -70.4396057, -66.2881317, -66.2881317, -66.2488556, -68.1571503, -68.6016083, -70.8842392, -67.4250565, -67.4250565],
      [-48.5280342, -51.2101669, -51.2101669, -51.3769951, -50.79673  , -52.5835266, -54.07304  , -55.7611504, -55.7611504, -57.0101242, -55.4844208, -55.0499802, -55.9027977, -58.4899368, -58.4899368],
      [-73.4104538, -70.6903915, -70.6903915, -65.5283585, -64.1890793, -61.7710075, -62.4137192, -64.8972015, -64.8972015, -65.2331924, -64.7742996, -64.4720001, -63.6399651, -63.8659668, -63.8659668],
      [-73.7384033, -73.0270691, -73.0270691, -75.4684753, -76.7094803, -76.3172226, -73.9958878, -72.7968292, -72.7968292, -73.744072 , -73.9129944, -74.8339081, -73.9165726, -74.3681183, -74.3681183],
      [-79.1597519, -77.3400269, -77.3400269, -78.7101135, -79.853653 , -80.6526794, -80.831398 , -79.2034302, -79.2034302, -77.3681335, -74.8954315, -75.216774 , -75.7962799, -76.8806381, -76.8806381],
      [-88.7070618, -86.5954514, -86.5954514, -87.4830322, -88.5914612, -88.4231033, -86.0911942, -82.6953888, -82.6953888, -81.5805664, -80.9535751, -82.0276947, -85.8942719, -84.5378418, -84.5378418],
      [-76.7305908, -77.8530807, -77.8530807, -77.4978333, -77.737587 , -76.9194565, -76.984848 , -77.4929428, -77.4929428, -76.5160675, -74.9752426, -75.1259842, -77.2016983, -79.2734604, -79.2734604],
      [-86.5547791, -84.9618378, -84.9618378, -85.5998383, -86.1442795, -85.8111115, -85.2784271, -86.385788 , -86.385788 , -85.9166107, -85.6817093, -86.0854797, -87.4454117, -86.3592224, -86.3592224],
      [-85.9752274, -89.4331207, -89.4331207, -83.6778336, -83.0086212, -81.5770035, -82.6853561, -86.5109329, -86.5109329, -86.2768555, -86.2407074, -85.5998383, -81.1055679, -79.3405991, -79.3405991],
      [-78.8855286, -78.7826233, -78.7826233, -80.0317078, -82.3156128, -79.2341766, -76.7047424, -79.1614609, -79.1614609, -81.4261627, -82.3528595, -80.3708267, -77.778656 , -78.9623871, -78.9623871],
      [-74.9737854, -70.2071304, -70.2071304, -69.6872559, -69.6290359, -69.7406464, -71.0644455, -75.2915192, -75.2915192, -78.9878769, -79.8856506, -77.5355301, -76.7230911, -80.0672455, -80.0672455],
      [-75.8504181, -69.208374 , -69.208374 , -67.7194595, -67.4430771, -67.9170151, -69.6545715, -71.9796295, -71.9796295, -72.9368515, -73.9347153, -74.2523422, -76.1374512, -82.939003 , -82.939003 ],
      [-81.5337753, -75.7404099, -75.7404099, -72.7008896, -72.0818405, -72.8373489, -75.4976578, -79.0461807, -79.0461807, -79.6797638, -77.9209366, -77.2798767, -77.0695114, -77.4137192, -77.4137192]]


data = torch.Tensor(data)

# loading model params from file
model_params_path = 'model_params/model_params_023' 
model_params = torch.load(model_params_path)
model = model_params['model']
mean = model_params['mean']
std = model_params['std']
model.eval()

for name, param in model.state_dict().items():
    arr = param.numpy()
    print(name, arr.shape)
    print(arr)

# data processing with same parameters as model
data_tensor = torch.Tensor(data)
print(data_tensor.shape)
logged_data = data_tensor
if (not logged):
    logged_data = torch.log(data_tensor).max(torch.tensor(-25))
normed_data = logged_data
if (not normed):
  normed_data = (logged_data - mean)/std
inputs = normed_data
# print(inputs)
# for name, param in model.state_dict().items():
#     print(name)
#     print(param)

# print('mean')
# print(mean)
# print('std')
# print(std)

print(inputs.shape)
curr_input = inputs.reshape([1, 16, 15])
print(curr_input)
outputs = model(curr_input)
_, predicted = torch.max(outputs.data, 1)

print('outputs', outputs)
print('predicted', predicted)