// model_param 15

const DEBUG = true; 
/** ===================================================== 
 *            PARAMETERS  
* ===================================================== 
*/

var tdnn1Weight = [[1.812771260738372803e-01,3.991544246673583984e-01,1.410541683435440063e-01,-4.683352112770080566e-01,1.933487355709075928e-01,1.079184114933013916e-01,7.376736402511596680e-01,1.495528072118759155e-01,-4.889904856681823730e-01,-7.367792725563049316e-02,-3.485316038131713867e-01,-6.977038383483886719e-01,-3.102774918079376221e-01,8.021134138107299805e-02,7.661584019660949707e-02,5.246437788009643555e-01,4.072675406932830811e-01,2.798868715763092041e-01,1.697847992181777954e-01,3.858925104141235352e-01,7.181980013847351074e-01,-3.204737901687622070e-01,-2.732799351215362549e-01,-3.341503143310546875e-01,-1.334160089492797852e+00,-6.850094199180603027e-01,6.693439930677413940e-02,-1.938715577125549316e-01,6.928023099899291992e-01,1.033642172813415527e+00,1.757519841194152832e-01,1.048007011413574219e-01,-4.013004302978515625e-01,-4.025991559028625488e-01,-7.964355945587158203e-01,1.960715465247631073e-02,-1.504157204180955887e-02,2.115354835987091064e-01,2.098854333162307739e-01,6.732114553451538086e-01,2.102609425783157349e-01,-3.749601840972900391e-01,-1.757828146219253540e-01,-3.944992125034332275e-01,-3.310253620147705078e-01,1.252710521221160889e-01,3.298304080963134766e-01,3.485022485256195068e-01], 
[1.812771260738372803e-01,3.991544246673583984e-01,1.410541683435440063e-01,-4.683352112770080566e-01,1.933487355709075928e-01,1.079184114933013916e-01,7.376736402511596680e-01,1.495528072118759155e-01,-4.889904856681823730e-01,-7.367792725563049316e-02,-3.485316038131713867e-01,-6.977038383483886719e-01,-3.102774918079376221e-01,8.021134138107299805e-02,7.661584019660949707e-02,5.246437788009643555e-01,4.072675406932830811e-01,2.798868715763092041e-01,1.697847992181777954e-01,3.858925104141235352e-01,7.181980013847351074e-01,-3.204737901687622070e-01,-2.732799351215362549e-01,-3.341503143310546875e-01,-1.334160089492797852e+00,-6.850094199180603027e-01,6.693439930677413940e-02,-1.938715577125549316e-01,6.928023099899291992e-01,1.033642172813415527e+00,1.757519841194152832e-01,1.048007011413574219e-01,-4.013004302978515625e-01,-4.025991559028625488e-01,-7.964355945587158203e-01,1.960715465247631073e-02,-1.504157204180955887e-02,2.115354835987091064e-01,2.098854333162307739e-01,6.732114553451538086e-01,2.102609425783157349e-01,-3.749601840972900391e-01,-1.757828146219253540e-01,-3.944992125034332275e-01,-3.310253620147705078e-01,1.252710521221160889e-01,3.298304080963134766e-01,3.485022485256195068e-01], 
[1.812771260738372803e-01,3.991544246673583984e-01,1.410541683435440063e-01,-4.683352112770080566e-01,1.933487355709075928e-01,1.079184114933013916e-01,7.376736402511596680e-01,1.495528072118759155e-01,-4.889904856681823730e-01,-7.367792725563049316e-02,-3.485316038131713867e-01,-6.977038383483886719e-01,-3.102774918079376221e-01,8.021134138107299805e-02,7.661584019660949707e-02,5.246437788009643555e-01,4.072675406932830811e-01,2.798868715763092041e-01,1.697847992181777954e-01,3.858925104141235352e-01,7.181980013847351074e-01,-3.204737901687622070e-01,-2.732799351215362549e-01,-3.341503143310546875e-01,-1.334160089492797852e+00,-6.850094199180603027e-01,6.693439930677413940e-02,-1.938715577125549316e-01,6.928023099899291992e-01,1.033642172813415527e+00,1.757519841194152832e-01,1.048007011413574219e-01,-4.013004302978515625e-01,-4.025991559028625488e-01,-7.964355945587158203e-01,1.960715465247631073e-02,-1.504157204180955887e-02,2.115354835987091064e-01,2.098854333162307739e-01,6.732114553451538086e-01,2.102609425783157349e-01,-3.749601840972900391e-01,-1.757828146219253540e-01,-3.944992125034332275e-01,-3.310253620147705078e-01,1.252710521221160889e-01,3.298304080963134766e-01,3.485022485256195068e-01], 
[1.812771260738372803e-01,3.991544246673583984e-01,1.410541683435440063e-01,-4.683352112770080566e-01,1.933487355709075928e-01,1.079184114933013916e-01,7.376736402511596680e-01,1.495528072118759155e-01,-4.889904856681823730e-01,-7.367792725563049316e-02,-3.485316038131713867e-01,-6.977038383483886719e-01,-3.102774918079376221e-01,8.021134138107299805e-02,7.661584019660949707e-02,5.246437788009643555e-01,4.072675406932830811e-01,2.798868715763092041e-01,1.697847992181777954e-01,3.858925104141235352e-01,7.181980013847351074e-01,-3.204737901687622070e-01,-2.732799351215362549e-01,-3.341503143310546875e-01,-1.334160089492797852e+00,-6.850094199180603027e-01,6.693439930677413940e-02,-1.938715577125549316e-01,6.928023099899291992e-01,1.033642172813415527e+00,1.757519841194152832e-01,1.048007011413574219e-01,-4.013004302978515625e-01,-4.025991559028625488e-01,-7.964355945587158203e-01,1.960715465247631073e-02,-1.504157204180955887e-02,2.115354835987091064e-01,2.098854333162307739e-01,6.732114553451538086e-01,2.102609425783157349e-01,-3.749601840972900391e-01,-1.757828146219253540e-01,-3.944992125034332275e-01,-3.310253620147705078e-01,1.252710521221160889e-01,3.298304080963134766e-01,3.485022485256195068e-01], 
[1.812771260738372803e-01,3.991544246673583984e-01,1.410541683435440063e-01,-4.683352112770080566e-01,1.933487355709075928e-01,1.079184114933013916e-01,7.376736402511596680e-01,1.495528072118759155e-01,-4.889904856681823730e-01,-7.367792725563049316e-02,-3.485316038131713867e-01,-6.977038383483886719e-01,-3.102774918079376221e-01,8.021134138107299805e-02,7.661584019660949707e-02,5.246437788009643555e-01,4.072675406932830811e-01,2.798868715763092041e-01,1.697847992181777954e-01,3.858925104141235352e-01,7.181980013847351074e-01,-3.204737901687622070e-01,-2.732799351215362549e-01,-3.341503143310546875e-01,-1.334160089492797852e+00,-6.850094199180603027e-01,6.693439930677413940e-02,-1.938715577125549316e-01,6.928023099899291992e-01,1.033642172813415527e+00,1.757519841194152832e-01,1.048007011413574219e-01,-4.013004302978515625e-01,-4.025991559028625488e-01,-7.964355945587158203e-01,1.960715465247631073e-02,-1.504157204180955887e-02,2.115354835987091064e-01,2.098854333162307739e-01,6.732114553451538086e-01,2.102609425783157349e-01,-3.749601840972900391e-01,-1.757828146219253540e-01,-3.944992125034332275e-01,-3.310253620147705078e-01,1.252710521221160889e-01,3.298304080963134766e-01,3.485022485256195068e-01], 
[1.812771260738372803e-01,3.991544246673583984e-01,1.410541683435440063e-01,-4.683352112770080566e-01,1.933487355709075928e-01,1.079184114933013916e-01,7.376736402511596680e-01,1.495528072118759155e-01,-4.889904856681823730e-01,-7.367792725563049316e-02,-3.485316038131713867e-01,-6.977038383483886719e-01,-3.102774918079376221e-01,8.021134138107299805e-02,7.661584019660949707e-02,5.246437788009643555e-01,4.072675406932830811e-01,2.798868715763092041e-01,1.697847992181777954e-01,3.858925104141235352e-01,7.181980013847351074e-01,-3.204737901687622070e-01,-2.732799351215362549e-01,-3.341503143310546875e-01,-1.334160089492797852e+00,-6.850094199180603027e-01,6.693439930677413940e-02,-1.938715577125549316e-01,6.928023099899291992e-01,1.033642172813415527e+00,1.757519841194152832e-01,1.048007011413574219e-01,-4.013004302978515625e-01,-4.025991559028625488e-01,-7.964355945587158203e-01,1.960715465247631073e-02,-1.504157204180955887e-02,2.115354835987091064e-01,2.098854333162307739e-01,6.732114553451538086e-01,2.102609425783157349e-01,-3.749601840972900391e-01,-1.757828146219253540e-01,-3.944992125034332275e-01,-3.310253620147705078e-01,1.252710521221160889e-01,3.298304080963134766e-01,3.485022485256195068e-01], 
[1.812771260738372803e-01,3.991544246673583984e-01,1.410541683435440063e-01,-4.683352112770080566e-01,1.933487355709075928e-01,1.079184114933013916e-01,7.376736402511596680e-01,1.495528072118759155e-01,-4.889904856681823730e-01,-7.367792725563049316e-02,-3.485316038131713867e-01,-6.977038383483886719e-01,-3.102774918079376221e-01,8.021134138107299805e-02,7.661584019660949707e-02,5.246437788009643555e-01,4.072675406932830811e-01,2.798868715763092041e-01,1.697847992181777954e-01,3.858925104141235352e-01,7.181980013847351074e-01,-3.204737901687622070e-01,-2.732799351215362549e-01,-3.341503143310546875e-01,-1.334160089492797852e+00,-6.850094199180603027e-01,6.693439930677413940e-02,-1.938715577125549316e-01,6.928023099899291992e-01,1.033642172813415527e+00,1.757519841194152832e-01,1.048007011413574219e-01,-4.013004302978515625e-01,-4.025991559028625488e-01,-7.964355945587158203e-01,1.960715465247631073e-02,-1.504157204180955887e-02,2.115354835987091064e-01,2.098854333162307739e-01,6.732114553451538086e-01,2.102609425783157349e-01,-3.749601840972900391e-01,-1.757828146219253540e-01,-3.944992125034332275e-01,-3.310253620147705078e-01,1.252710521221160889e-01,3.298304080963134766e-01,3.485022485256195068e-01], 
[1.618360579013824463e-01,9.163953661918640137e-01,4.240742027759552002e-01,-3.083733916282653809e-01,1.888215839862823486e-01,-4.949066340923309326e-01,6.664124727249145508e-01,3.301397562026977539e-01,2.881737649440765381e-01,8.488897681236267090e-01,3.716635406017303467e-01,2.926147878170013428e-01,-4.058343470096588135e-01,-4.790077507495880127e-01,-3.855452239513397217e-01,6.511480212211608887e-01,3.449667096138000488e-01,-2.666735053062438965e-01,-3.689637407660484314e-02,3.925099223852157593e-02,-4.207477271556854248e-01,-2.155617438256740570e-02,8.966187387704849243e-02,-1.171492561697959900e-01,-8.043417334556579590e-01,-3.203189373016357422e-01,-3.663089573383331299e-01,1.525911390781402588e-01,4.950171113014221191e-01,3.768462240695953369e-01,-7.535721659660339355e-01,-7.971494197845458984e-01,-7.899171113967895508e-01,-9.383701533079147339e-02,-6.492786854505538940e-02,3.061419725418090820e-01,-1.068482547998428345e-01,1.379740238189697266e-01,-1.086805313825607300e-01,-2.572957873344421387e-01,1.058437488973140717e-02,-7.166638374328613281e-01,2.450869828462600708e-01,3.895846009254455566e-01,-1.893006414175033569e-01,1.026583611965179443e-01,4.621953070163726807e-01,4.910500347614288330e-01] ];

var tdnn1Bias = [5.362448096275329590e-01, 
5.362448096275329590e-01, 
5.362448096275329590e-01, 
5.362448096275329590e-01, 
5.362448096275329590e-01, 
5.362448096275329590e-01, 
5.362448096275329590e-01, 
1.187776684761047363e+00];

var tdnn2Weight = [[-1.335004329681396484e+00,-3.724779784679412842e-01,-1.679126381874084473e+00,7.451456189155578613e-01,-7.813916802406311035e-01,-4.233115613460540771e-01,2.098637372255325317e-01,9.374514222145080566e-01,1.506308436393737793e+00,-3.626474738121032715e-01,-1.514259725809097290e-01,4.422380328178405762e-01,-1.731797754764556885e-01,-7.271988689899444580e-02,3.479409217834472656e-01,5.102519989013671875e-01,-2.961184978485107422e-01,1.366954147815704346e-01,1.007673859596252441e+00,2.976249456405639648e-01,7.475045919418334961e-01,2.105935811996459961e-01,-5.583910942077636719e-01,-1.016762971878051758e+00], 
[-1.335004329681396484e+00,-3.724779784679412842e-01,-1.679126381874084473e+00,7.451456189155578613e-01,-7.813916802406311035e-01,-4.233115613460540771e-01,2.098637372255325317e-01,9.374514222145080566e-01,1.506308436393737793e+00,-3.626474738121032715e-01,-1.514259725809097290e-01,4.422380328178405762e-01,-1.731797754764556885e-01,-7.271988689899444580e-02,3.479409217834472656e-01,5.102519989013671875e-01,-2.961184978485107422e-01,1.366954147815704346e-01,1.007673859596252441e+00,2.976249456405639648e-01,7.475045919418334961e-01,2.105935811996459961e-01,-5.583910942077636719e-01,-1.016762971878051758e+00], 
[-3.266112506389617920e-01,-1.192969322204589844e+00,4.956808388233184814e-01,-1.807245969772338867e+00,2.732292935252189636e-02,5.021244883537292480e-01,-7.315289974212646484e-01,1.285398483276367188e+00,6.767660975456237793e-01,1.108877584338188171e-01,2.798820436000823975e-01,7.615875601768493652e-01,3.504985809326171875e+00,6.392170786857604980e-01,-1.266905546188354492e+00,-2.151490747928619385e-01,1.171389669179916382e-01,-6.162536144256591797e-01,-2.789105892181396484e+00,-3.500140309333801270e-01,-8.906414508819580078e-01,3.414770960807800293e-01,2.972684204578399658e-01,1.493515223264694214e-01] ];

var tdnn2Bias = [5.037331581115722656e-01, 
5.037331581115722656e-01, 
-1.856959164142608643e-01];

var linearWeight = [[-1.275321364402770996e+00,-4.543158113956451416e-01,3.914128541946411133e-01,5.705081224441528320e-01,2.209817320108413696e-01,-3.969017267227172852e-01,-9.858759641647338867e-01,-1.136175751686096191e+00,-1.894137382507324219e+00,-2.691997289657592773e+00,-1.358188271522521973e+00,-1.686157584190368652e-01,3.143717944622039795e-01,-6.356549859046936035e-01,-8.238990306854248047e-01,-1.295418143272399902e+00,-5.842572450637817383e-01,-6.720532774925231934e-01,4.231986045837402344e+00,3.462161064147949219e+00,1.694118857383728027e+00,7.500541806221008301e-01,2.983818054199218750e-01,2.143852859735488892e-01,4.505692794919013977e-02,-4.713188111782073975e-01,-9.198500514030456543e-01], 
[-1.275321364402770996e+00,-4.543158113956451416e-01,3.914128541946411133e-01,5.705081224441528320e-01,2.209817320108413696e-01,-3.969017267227172852e-01,-9.858759641647338867e-01,-1.136175751686096191e+00,-1.894137382507324219e+00,-2.691997289657592773e+00,-1.358188271522521973e+00,-1.686157584190368652e-01,3.143717944622039795e-01,-6.356549859046936035e-01,-8.238990306854248047e-01,-1.295418143272399902e+00,-5.842572450637817383e-01,-6.720532774925231934e-01,4.231986045837402344e+00,3.462161064147949219e+00,1.694118857383728027e+00,7.500541806221008301e-01,2.983818054199218750e-01,2.143852859735488892e-01,4.505692794919013977e-02,-4.713188111782073975e-01,-9.198500514030456543e-01], 
[1.346620559692382812e+00,1.635186523199081421e-01,-6.337150931358337402e-01,-8.352040052413940430e-01,-6.488962173461914062e-01,-3.833971321582794189e-01,-4.799719750881195068e-01,-3.569128811359405518e-01,-4.100141227245330811e-01,5.919455051422119141e+00,2.940081596374511719e+00,1.031345009803771973e+00,1.490654796361923218e-01,2.877749800682067871e-01,2.698507308959960938e-01,5.754169225692749023e-01,1.367343544960021973e+00,1.256675362586975098e+00,-1.907542943954467773e+00,-1.138034701347351074e+00,-5.459690690040588379e-01,-4.889220297336578369e-01,-5.166100859642028809e-01,-1.903004758059978485e-02,-2.252324968576431274e-01,-7.363407611846923828e-01,-1.005339622497558594e-01] ];

var linearBias = [7.878746986389160156e-01, 
7.878746986389160156e-01, 
-1.389516949653625488e+00];

var linearWeight = [[-1.275321364402770996e+00,-4.543158113956451416e-01,3.914128541946411133e-01,5.705081224441528320e-01,2.209817320108413696e-01,-3.969017267227172852e-01,-9.858759641647338867e-01,-1.136175751686096191e+00,-1.894137382507324219e+00,-2.691997289657592773e+00,-1.358188271522521973e+00,-1.686157584190368652e-01,3.143717944622039795e-01,-6.356549859046936035e-01,-8.238990306854248047e-01,-1.295418143272399902e+00,-5.842572450637817383e-01,-6.720532774925231934e-01,4.231986045837402344e+00,3.462161064147949219e+00,1.694118857383728027e+00,7.500541806221008301e-01,2.983818054199218750e-01,2.143852859735488892e-01,4.505692794919013977e-02,-4.713188111782073975e-01,-9.198500514030456543e-01], 
[-1.275321364402770996e+00,-4.543158113956451416e-01,3.914128541946411133e-01,5.705081224441528320e-01,2.209817320108413696e-01,-3.969017267227172852e-01,-9.858759641647338867e-01,-1.136175751686096191e+00,-1.894137382507324219e+00,-2.691997289657592773e+00,-1.358188271522521973e+00,-1.686157584190368652e-01,3.143717944622039795e-01,-6.356549859046936035e-01,-8.238990306854248047e-01,-1.295418143272399902e+00,-5.842572450637817383e-01,-6.720532774925231934e-01,4.231986045837402344e+00,3.462161064147949219e+00,1.694118857383728027e+00,7.500541806221008301e-01,2.983818054199218750e-01,2.143852859735488892e-01,4.505692794919013977e-02,-4.713188111782073975e-01,-9.198500514030456543e-01], 
[1.346620559692382812e+00,1.635186523199081421e-01,-6.337150931358337402e-01,-8.352040052413940430e-01,-6.488962173461914062e-01,-3.833971321582794189e-01,-4.799719750881195068e-01,-3.569128811359405518e-01,-4.100141227245330811e-01,5.919455051422119141e+00,2.940081596374511719e+00,1.031345009803771973e+00,1.490654796361923218e-01,2.877749800682067871e-01,2.698507308959960938e-01,5.754169225692749023e-01,1.367343544960021973e+00,1.256675362586975098e+00,-1.907542943954467773e+00,-1.138034701347351074e+00,-5.459690690040588379e-01,-4.889220297336578369e-01,-5.166100859642028809e-01,-1.903004758059978485e-02,-2.252324968576431274e-01,-7.363407611846923828e-01,-1.005339622497558594e-01] ];

var linearBias = [7.878746986389160156e-01, 
7.878746986389160156e-01, 
-1.389516949653625488e+00];


var mean = tf.tensor([[-1.002117233276367188e+02,-9.577408599853515625e+01,-9.068260955810546875e+01,-8.908010101318359375e+01,-8.883013153076171875e+01,-8.932281494140625000e+01,-9.016002655029296875e+01,-9.055487060546875000e+01,-9.070959472656250000e+01,-9.072010803222656250e+01,-9.088055419921875000e+01,-9.074184417724609375e+01,-9.079324340820312500e+01,-9.090682983398437500e+01,-9.094776153564453125e+01], 
[-1.002117233276367188e+02,-9.577408599853515625e+01,-9.068260955810546875e+01,-8.908010101318359375e+01,-8.883013153076171875e+01,-8.932281494140625000e+01,-9.016002655029296875e+01,-9.055487060546875000e+01,-9.070959472656250000e+01,-9.072010803222656250e+01,-9.088055419921875000e+01,-9.074184417724609375e+01,-9.079324340820312500e+01,-9.090682983398437500e+01,-9.094776153564453125e+01], 
[-1.002117233276367188e+02,-9.577408599853515625e+01,-9.068260955810546875e+01,-8.908010101318359375e+01,-8.883013153076171875e+01,-8.932281494140625000e+01,-9.016002655029296875e+01,-9.055487060546875000e+01,-9.070959472656250000e+01,-9.072010803222656250e+01,-9.088055419921875000e+01,-9.074184417724609375e+01,-9.079324340820312500e+01,-9.090682983398437500e+01,-9.094776153564453125e+01], 
[-1.002117233276367188e+02,-9.577408599853515625e+01,-9.068260955810546875e+01,-8.908010101318359375e+01,-8.883013153076171875e+01,-8.932281494140625000e+01,-9.016002655029296875e+01,-9.055487060546875000e+01,-9.070959472656250000e+01,-9.072010803222656250e+01,-9.088055419921875000e+01,-9.074184417724609375e+01,-9.079324340820312500e+01,-9.090682983398437500e+01,-9.094776153564453125e+01], 
[-1.002117233276367188e+02,-9.577408599853515625e+01,-9.068260955810546875e+01,-8.908010101318359375e+01,-8.883013153076171875e+01,-8.932281494140625000e+01,-9.016002655029296875e+01,-9.055487060546875000e+01,-9.070959472656250000e+01,-9.072010803222656250e+01,-9.088055419921875000e+01,-9.074184417724609375e+01,-9.079324340820312500e+01,-9.090682983398437500e+01,-9.094776153564453125e+01], 
[-1.002117233276367188e+02,-9.577408599853515625e+01,-9.068260955810546875e+01,-8.908010101318359375e+01,-8.883013153076171875e+01,-8.932281494140625000e+01,-9.016002655029296875e+01,-9.055487060546875000e+01,-9.070959472656250000e+01,-9.072010803222656250e+01,-9.088055419921875000e+01,-9.074184417724609375e+01,-9.079324340820312500e+01,-9.090682983398437500e+01,-9.094776153564453125e+01], 
[-1.002117233276367188e+02,-9.577408599853515625e+01,-9.068260955810546875e+01,-8.908010101318359375e+01,-8.883013153076171875e+01,-8.932281494140625000e+01,-9.016002655029296875e+01,-9.055487060546875000e+01,-9.070959472656250000e+01,-9.072010803222656250e+01,-9.088055419921875000e+01,-9.074184417724609375e+01,-9.079324340820312500e+01,-9.090682983398437500e+01,-9.094776153564453125e+01], 
[-1.002117233276367188e+02,-9.577408599853515625e+01,-9.068260955810546875e+01,-8.908010101318359375e+01,-8.883013153076171875e+01,-8.932281494140625000e+01,-9.016002655029296875e+01,-9.055487060546875000e+01,-9.070959472656250000e+01,-9.072010803222656250e+01,-9.088055419921875000e+01,-9.074184417724609375e+01,-9.079324340820312500e+01,-9.090682983398437500e+01,-9.094776153564453125e+01], 
[-1.002117233276367188e+02,-9.577408599853515625e+01,-9.068260955810546875e+01,-8.908010101318359375e+01,-8.883013153076171875e+01,-8.932281494140625000e+01,-9.016002655029296875e+01,-9.055487060546875000e+01,-9.070959472656250000e+01,-9.072010803222656250e+01,-9.088055419921875000e+01,-9.074184417724609375e+01,-9.079324340820312500e+01,-9.090682983398437500e+01,-9.094776153564453125e+01], 
[-1.002117233276367188e+02,-9.577408599853515625e+01,-9.068260955810546875e+01,-8.908010101318359375e+01,-8.883013153076171875e+01,-8.932281494140625000e+01,-9.016002655029296875e+01,-9.055487060546875000e+01,-9.070959472656250000e+01,-9.072010803222656250e+01,-9.088055419921875000e+01,-9.074184417724609375e+01,-9.079324340820312500e+01,-9.090682983398437500e+01,-9.094776153564453125e+01], 
[-1.002117233276367188e+02,-9.577408599853515625e+01,-9.068260955810546875e+01,-8.908010101318359375e+01,-8.883013153076171875e+01,-8.932281494140625000e+01,-9.016002655029296875e+01,-9.055487060546875000e+01,-9.070959472656250000e+01,-9.072010803222656250e+01,-9.088055419921875000e+01,-9.074184417724609375e+01,-9.079324340820312500e+01,-9.090682983398437500e+01,-9.094776153564453125e+01], 
[-1.002117233276367188e+02,-9.577408599853515625e+01,-9.068260955810546875e+01,-8.908010101318359375e+01,-8.883013153076171875e+01,-8.932281494140625000e+01,-9.016002655029296875e+01,-9.055487060546875000e+01,-9.070959472656250000e+01,-9.072010803222656250e+01,-9.088055419921875000e+01,-9.074184417724609375e+01,-9.079324340820312500e+01,-9.090682983398437500e+01,-9.094776153564453125e+01], 
[-1.002117233276367188e+02,-9.577408599853515625e+01,-9.068260955810546875e+01,-8.908010101318359375e+01,-8.883013153076171875e+01,-8.932281494140625000e+01,-9.016002655029296875e+01,-9.055487060546875000e+01,-9.070959472656250000e+01,-9.072010803222656250e+01,-9.088055419921875000e+01,-9.074184417724609375e+01,-9.079324340820312500e+01,-9.090682983398437500e+01,-9.094776153564453125e+01], 
[-1.002117233276367188e+02,-9.577408599853515625e+01,-9.068260955810546875e+01,-8.908010101318359375e+01,-8.883013153076171875e+01,-8.932281494140625000e+01,-9.016002655029296875e+01,-9.055487060546875000e+01,-9.070959472656250000e+01,-9.072010803222656250e+01,-9.088055419921875000e+01,-9.074184417724609375e+01,-9.079324340820312500e+01,-9.090682983398437500e+01,-9.094776153564453125e+01], 
[-1.002117233276367188e+02,-9.577408599853515625e+01,-9.068260955810546875e+01,-8.908010101318359375e+01,-8.883013153076171875e+01,-8.932281494140625000e+01,-9.016002655029296875e+01,-9.055487060546875000e+01,-9.070959472656250000e+01,-9.072010803222656250e+01,-9.088055419921875000e+01,-9.074184417724609375e+01,-9.079324340820312500e+01,-9.090682983398437500e+01,-9.094776153564453125e+01], 
[-9.282476806640625000e+01,-8.543283081054687500e+01,-8.145740509033203125e+01,-8.092426300048828125e+01,-8.189454650878906250e+01,-8.302781677246093750e+01,-8.351535034179687500e+01,-8.381501770019531250e+01,-8.401467895507812500e+01,-8.493599700927734375e+01,-8.615591430664062500e+01,-8.692542266845703125e+01,-8.746574401855468750e+01,-8.753370666503906250e+01,-8.828668975830078125e+01] ]);

var std = tf.tensor([[6.719078540802001953e+00,5.749404907226562500e+00,4.898271083831787109e+00,4.398175239562988281e+00,4.545714855194091797e+00,4.250361919403076172e+00,4.622580051422119141e+00,4.593819141387939453e+00,4.510543346405029297e+00,4.801941394805908203e+00,4.934604167938232422e+00,4.654274940490722656e+00,4.764934539794921875e+00,4.584099292755126953e+00,4.782719612121582031e+00], 
[6.719078540802001953e+00,5.749404907226562500e+00,4.898271083831787109e+00,4.398175239562988281e+00,4.545714855194091797e+00,4.250361919403076172e+00,4.622580051422119141e+00,4.593819141387939453e+00,4.510543346405029297e+00,4.801941394805908203e+00,4.934604167938232422e+00,4.654274940490722656e+00,4.764934539794921875e+00,4.584099292755126953e+00,4.782719612121582031e+00], 
[6.719078540802001953e+00,5.749404907226562500e+00,4.898271083831787109e+00,4.398175239562988281e+00,4.545714855194091797e+00,4.250361919403076172e+00,4.622580051422119141e+00,4.593819141387939453e+00,4.510543346405029297e+00,4.801941394805908203e+00,4.934604167938232422e+00,4.654274940490722656e+00,4.764934539794921875e+00,4.584099292755126953e+00,4.782719612121582031e+00], 
[6.719078540802001953e+00,5.749404907226562500e+00,4.898271083831787109e+00,4.398175239562988281e+00,4.545714855194091797e+00,4.250361919403076172e+00,4.622580051422119141e+00,4.593819141387939453e+00,4.510543346405029297e+00,4.801941394805908203e+00,4.934604167938232422e+00,4.654274940490722656e+00,4.764934539794921875e+00,4.584099292755126953e+00,4.782719612121582031e+00], 
[6.719078540802001953e+00,5.749404907226562500e+00,4.898271083831787109e+00,4.398175239562988281e+00,4.545714855194091797e+00,4.250361919403076172e+00,4.622580051422119141e+00,4.593819141387939453e+00,4.510543346405029297e+00,4.801941394805908203e+00,4.934604167938232422e+00,4.654274940490722656e+00,4.764934539794921875e+00,4.584099292755126953e+00,4.782719612121582031e+00], 
[6.719078540802001953e+00,5.749404907226562500e+00,4.898271083831787109e+00,4.398175239562988281e+00,4.545714855194091797e+00,4.250361919403076172e+00,4.622580051422119141e+00,4.593819141387939453e+00,4.510543346405029297e+00,4.801941394805908203e+00,4.934604167938232422e+00,4.654274940490722656e+00,4.764934539794921875e+00,4.584099292755126953e+00,4.782719612121582031e+00], 
[6.719078540802001953e+00,5.749404907226562500e+00,4.898271083831787109e+00,4.398175239562988281e+00,4.545714855194091797e+00,4.250361919403076172e+00,4.622580051422119141e+00,4.593819141387939453e+00,4.510543346405029297e+00,4.801941394805908203e+00,4.934604167938232422e+00,4.654274940490722656e+00,4.764934539794921875e+00,4.584099292755126953e+00,4.782719612121582031e+00], 
[6.719078540802001953e+00,5.749404907226562500e+00,4.898271083831787109e+00,4.398175239562988281e+00,4.545714855194091797e+00,4.250361919403076172e+00,4.622580051422119141e+00,4.593819141387939453e+00,4.510543346405029297e+00,4.801941394805908203e+00,4.934604167938232422e+00,4.654274940490722656e+00,4.764934539794921875e+00,4.584099292755126953e+00,4.782719612121582031e+00], 
[6.719078540802001953e+00,5.749404907226562500e+00,4.898271083831787109e+00,4.398175239562988281e+00,4.545714855194091797e+00,4.250361919403076172e+00,4.622580051422119141e+00,4.593819141387939453e+00,4.510543346405029297e+00,4.801941394805908203e+00,4.934604167938232422e+00,4.654274940490722656e+00,4.764934539794921875e+00,4.584099292755126953e+00,4.782719612121582031e+00], 
[6.719078540802001953e+00,5.749404907226562500e+00,4.898271083831787109e+00,4.398175239562988281e+00,4.545714855194091797e+00,4.250361919403076172e+00,4.622580051422119141e+00,4.593819141387939453e+00,4.510543346405029297e+00,4.801941394805908203e+00,4.934604167938232422e+00,4.654274940490722656e+00,4.764934539794921875e+00,4.584099292755126953e+00,4.782719612121582031e+00], 
[6.719078540802001953e+00,5.749404907226562500e+00,4.898271083831787109e+00,4.398175239562988281e+00,4.545714855194091797e+00,4.250361919403076172e+00,4.622580051422119141e+00,4.593819141387939453e+00,4.510543346405029297e+00,4.801941394805908203e+00,4.934604167938232422e+00,4.654274940490722656e+00,4.764934539794921875e+00,4.584099292755126953e+00,4.782719612121582031e+00], 
[6.719078540802001953e+00,5.749404907226562500e+00,4.898271083831787109e+00,4.398175239562988281e+00,4.545714855194091797e+00,4.250361919403076172e+00,4.622580051422119141e+00,4.593819141387939453e+00,4.510543346405029297e+00,4.801941394805908203e+00,4.934604167938232422e+00,4.654274940490722656e+00,4.764934539794921875e+00,4.584099292755126953e+00,4.782719612121582031e+00], 
[6.719078540802001953e+00,5.749404907226562500e+00,4.898271083831787109e+00,4.398175239562988281e+00,4.545714855194091797e+00,4.250361919403076172e+00,4.622580051422119141e+00,4.593819141387939453e+00,4.510543346405029297e+00,4.801941394805908203e+00,4.934604167938232422e+00,4.654274940490722656e+00,4.764934539794921875e+00,4.584099292755126953e+00,4.782719612121582031e+00], 
[6.719078540802001953e+00,5.749404907226562500e+00,4.898271083831787109e+00,4.398175239562988281e+00,4.545714855194091797e+00,4.250361919403076172e+00,4.622580051422119141e+00,4.593819141387939453e+00,4.510543346405029297e+00,4.801941394805908203e+00,4.934604167938232422e+00,4.654274940490722656e+00,4.764934539794921875e+00,4.584099292755126953e+00,4.782719612121582031e+00], 
[6.719078540802001953e+00,5.749404907226562500e+00,4.898271083831787109e+00,4.398175239562988281e+00,4.545714855194091797e+00,4.250361919403076172e+00,4.622580051422119141e+00,4.593819141387939453e+00,4.510543346405029297e+00,4.801941394805908203e+00,4.934604167938232422e+00,4.654274940490722656e+00,4.764934539794921875e+00,4.584099292755126953e+00,4.782719612121582031e+00], 
[1.374530220031738281e+01,1.060841846466064453e+01,9.919692039489746094e+00,1.057711696624755859e+01,1.120086002349853516e+01,1.226619720458984375e+01,1.205610179901123047e+01,1.221717739105224609e+01,1.158854961395263672e+01,1.144622135162353516e+01,1.138123989105224609e+01,1.108569431304931641e+01,1.042210388183593750e+01,1.036419677734375000e+01,9.880658149719238281e+00] ]);

// mean = tf.transpose(mean, [1, 0]);
// std = tf.transpose(std, [1, 0]);
/** =====================================================
 *            TDNN1 Processing Params
 * =====================================================
 */

tdnn1Weight = tf.tensor(tdnn1Weight);
tdnn1Weight = tf.reshape(tdnn1Weight, [8, 16, 3]);
// tdnn1Weight = tf.transpose(tdnn1Weight, [2, 1, 0]);
tdnn1Bias = tf.tensor(tdnn1Bias);

if(DEBUG){
  console.log('===== TDNN1 LAYER =====');
  console.log("weight", tdnn1Weight.shape, "should be (8, 16, 3)")
  console.log("bias", tdnn1Bias.shape, "should be (8,");
}


/** =====================================================
 *            TDNN2 Processing Params
 * =====================================================
 */
tdnn2Weight = tf.tensor(tdnn2Weight);
tdnn2Weight = tf.reshape(tdnn2Weight, [3, 8, 3]);
// tdnn2Weight = tf.transpose(tdnn2Weight, [2, 1, 0]);
tdnn2Bias = tf.tensor(tdnn2Bias);
tf.print(tdnn2Weight);

if(DEBUG){
  console.log('===== TDNN2 LAYER =====');
  console.log("weight", tdnn2Weight.shape, "should be (3, 8, 3)")
  console.log("bias", tdnn2Bias.shape, "should be (3,");
}

/** =====================================================
 *            LINEAR Processing Params
 * =====================================================
 */
linearWeight = tf.tensor(linearWeight);
linearWeight = tf.transpose(linearWeight, [1, 0]);
linearBias = tf.tensor(linearBias);

if(DEBUG){
  console.log('===== LINEAR LAYER =====');
  console.log("weight", linearWeight.shape, "should be (3, 27)")
  console.log("bias", linearBias.shape, "should be (3,");
}
  
/** =====================================================
 *           MODEL DEFINITION
 * =====================================================
 */

var arr = Array(16).fill().map(() => Array(15).fill(0));
arr[10][9] = 1
console.log(arr);
var single_sample = tf.tensor(arr);
console.log(single_sample.shape);
var single_sample_set = tf.expandDims(single_sample, 0)

console.log('small experiment begins')
// var conv1 = tf.layers.conv1d({inputShape: [16, 15],
//   filters: 8,
//   kernelSize: 3,
//   dilationRate: 1, // 0 - (-1)
//   padding: 'valid', // no padding
//   dataFormat: 'channelsFirst'
//   // bias term ?
//   });
// var conv2 = tf.layers.conv1d({inputShape: [8, 13],
//   filters: 3,
//   kernelSize: 3,
//   dilationRate: 2, // 0 - (-2)
//   padding: 'valid', // no padding
//   dataFormat: 'channelsFirst'
//   // bias term ?
//   });

var sample1 = [0, 1, 0];
sample1 = tf.tensor([sample1]);
console.log(sample1.shape)

var dense_layer = tf.layers.dense({inputDim: 3, units: 2, useBias: true});
console.log(dense_layer.apply(sample1).dataSync());
// var weight1 = [[1, 2, 3], [4, 5, 6]];
var weight1 = [[1, 4], [2, 5], [3, 6]]
weight1 = tf.tensor(weight1);
var bias1 = [0, 0];
bias1 = tf.tensor(bias1);
dense_layer.setWeights([weight1, bias1]);
console.log(dense_layer.apply(sample1).dataSync())

// console.log('input:', single_sample_set.shape);
// var o1 = conv1.apply(single_sample_set);
// console.log('after first conv', o1.shape);
// o1 = tf.transpose(o1, [0, 2, 1]);
// console.log('after transpose', o1.shape);
// var o2 = conv2.apply(o1);
// console.log('after second conv', o2.shape);
// o2 = tf.transpose(o2, [0, 2, 1]);
// console.log('after transpose', o2.shape);
// console.log('small experiment ends');

// console.log('small experiment 2: with the weights and activations')
// conv1.setWeights([tf.transpose(tdnn1Weight, [2, 1, 0]), tdnn1Bias]);
// conv2.setWeights([tf.transpose(tdnn2Weight, [2, 1, 0]), tdnn2Bias]);
// var activation_layer = tf.layers.activation({activation: 'sigmoid'});
// var flatten_layer = tf.layers.flatten();
// var dense_layer = tf.layers.dense({inputDim: 27, units: 3, useBias: true});
// console.log(dense_layer.weights);
// dense_layer.apply(tf.zeros([1, 27]));
// dense_layer.setWeights([linearWeight, linearBias])
// console.log('weights should work now', dense_layer.weights);
// console.log(dense_layer.getWeights())

// console.log('input:', single_sample_set.shape);
// // tf.print(single_sample_set);
// var o1 = conv1.apply(single_sample_set);
// console.log('after first conv', o1.shape);
// tf.print(o1);
// o1 = tf.transpose(o1, [0, 2, 1]);
// console.log('after transpose', o1.shape);
// var a1 = activation_layer.apply(o1);
// var o2 = conv2.apply(a1);
// console.log('after second conv', o2.shape);
// o2 = tf.transpose(o2, [0, 2, 1]);
// console.log('after transpose', o2.shape);
// var a2 = activation_layer.apply(o2);
// console.log('small experiment ends')
// var fl = flatten_layer.apply(a2);
// // var fced = fl * linearWeight + linearBias;
// var fced = dense_layer.apply(fl);
// // console.log(dense_layer.weights);
// console.log('after everything else')
// tf.print(fced);

// small experiment ends


const model = tf.sequential();
  
// Adding tdnn1
const context1 = [-1, 0, 1];
model.add(tf.layers.conv1d({inputShape: [16, 15],
                            filters: 8,
                            kernelSize: 3,
                            dilationRate: 1, // 0 - (-1)
                            padding: 'valid', // no padding
                            dataFormat: 'channelsFirst'
                            // bias term ?
                            }));
console.log(tdnn1Weight.shape, tdnn1Bias.shape);

model.layers[0].setWeights([tdnn1Weight, tdnn1Bias]);

// Adding Sigmoid 1
model.add(tf.layers.activation({activation: 'sigmoid'}));

// Adding tdnn2
const context2 = [-2, 0, 2];
model.add(tf.layers.conv1d({inputShape: [8, 13],
                            filters: 3,
                            kernelSize: 3,
                            dilationRate: 2, // 0 - (-2)
                            padding: 'valid', // no padding
                            dataFormat: 'channelsFirst'
                            // bias term ?
                            }));
model.layers[2].setWeights([tdnn2Weight, tdnn2Bias]);

// Adding Sigmoid 2
model.add(tf.layers.activation({activation: 'sigmoid'}));

// Adding Flatten
model.add(tf.layers.flatten());

// Adding Linear
model.add(tf.layers.dense({inputDim: 27,
                          units: 3,
                          useBias: true}));
model.layers[5].setWeights([linearWeight, linearBias]);
  

/** =====================================================
 *           COMPILING THE MODEL
 * =====================================================
 */
model.compile({loss: 'categoricalCrossentropy', optimizer: 'sgd'});
  

// console.log('linear weight', linearWeight.dataSync());
// console.log('linear bias', linearBias.dataSync());
// console.log(model.layers[5].bias);

/** =====================================================
 *           TESTING THE MODEL PLS REMOVE LATER
 * =====================================================
 */

// var subbed = tf.sub(dataTensor, mean);
//     var dataTensorNormed = tf.div(subbed, std);
//     dataTensorNormed = dataTensorNormed.expandDims(0);

// var y = model.predict(dataTensorNormed, {batchSize: 1});
// console.log(y.dataSync);

console.log('something is working at least');
var files;
var samples = [];
var samples_tensors = [];
var num_files;
document.getElementById("filepicker").addEventListener("change", function(event) {
  files = event.target.files;
  console.log('something changed');
  console.log(files);
}, false);

document.getElementById('submit').onclick = () => {
    console.log('clicked');
    var file_list = files;
    let promises = [];
    for (let file of file_list) {
        let filePromise = new Promise(resolve => {
            let reader = new FileReader();
            reader.readAsText(file);
            reader.onload = () => resolve(reader.result);
        });
        promises.push(filePromise);
    }

    Promise.all(promises).then(fileContents => {
        // fileContents will be an array containing
        // the contents of the files, perform the
        // character replacements and other transformations
        // here as needed
        console.log(fileContents.length);
        num_files = fileContents.length;
        for (let i = 0; i < fileContents.length; i++) {
            var file = fileContents[i];
            const rows = file.split("\n");
            for (let j = 0; j < rows.length - 1; j++) {
                rows[j] = rows[j].split(",");
                for (let k = 0; k < rows[j].length; k ++){
                    // console.log(rows[j][k])
                    rows[j][k] = Number(rows[j][k]);
                }
            }
            samples.push(rows);
            // console.log('1', samples);
        }

        for (let j = 0; j < samples.length; j ++){
            let data = samples[j];
            console.log(data);
     
            // sum columns
            var matrix = data
            const numRows = matrix.length;
            const numCols = matrix[0].length; // Assuming all rows have the same number of columns
        
            const columnSums = new Array(numCols).fill(0);
        
            // console.log(numCols, numRows);
            for (let col = 0; col < numCols; col++) {
              for (let row = 0; row < numRows; row++) {
                if(matrix[row][col] == undefined){
                    continue;
                }
                columnSums[col] += 10**(matrix[row][col]);
              }
            }
            // console.log(columnSums);
            // custom max
            if (columnSums.length === 0) {
              return undefined; // Return undefined if no columnSums are provided
            }
            let max = -Infinity; // Start with a very low value
            for (let i = 1; i < columnSums.length; i++) {
              if (columnSums[i] > max) {
                max = columnSums[i];
              }
            }
            // console.log(max);
            // normalize
            var array_2 = Array(columnSums);
            for(var i = 0, length = columnSums.length; i < length; i++){
                array_2[i] = columnSums[i] / max;
            }
            // console.log(array_2);
            // find max
            const thresh_indexes = [];
            for (let i = 2; i < array_2.length; i++) {
              if (array_2[i] > 0.3) {
                thresh_indexes.push(i);
              }
            }
        
            let start_time_ms = thresh_indexes[0]*10 - 20;
            // console.log('start time', start_time_ms);
    
            // to capture onset in msec
    
            var start_frame = start_time_ms / 10;
            var currDat = tf.tensor(data);
            var the_dat = currDat.slice([0, start_frame], [16, 15]);
            var dataTensor = tf.transpose(the_dat, [1, 0]);
            samples_tensors.push(dataTensor);
            
        }
        let dataTensors = tf.stack(samples_tensors);
        console.log('dataTensors shape, mean shape, std shape', dataTensors.shape, mean.shape, std.shape);
        var subbed = tf.sub(dataTensors, mean);
        var dataTensorNormed = tf.div(subbed, std);

        var y = model.predict(dataTensorNormed, {batchSize: 1}); // predicting the model

        console.log('predicted values (y)', y.dataSync());
        var y_arr  = Array.from(y.dataSync());
        var the_str = "";
        console.log(typeof(y.dataSync));
        for(let i=0; i < y_arr.length; i += 3) {
            the_str = the_str + y_arr[i]+ ","+ y_arr[i+1]+ ","+ y_arr[i + 2]+ "\n";
            console.log( y_arr[i]+ ","+ y_arr[i+1]+ ","+ y_arr[i + 2]+ "\n")
        }
        console.log(the_str);
        document.getElementById('class34').innerHTML = the_str;
        // tf.browser.toPixels(y, document.getElementsByTagName("canvas")[0]);
    });
}

document.getElementById('single').addEventListener('click', function(){
  console.log('lmfoa');
  var arr = Array(16).fill().map(() => Array(15).fill(0));
  arr[10][9] = 1
  console.log(arr);
  var single_sample = tf.tensor(arr);
  console.log(single_sample.shape);
  var single_sample_set = tf.expandDims(single_sample, 0)
  console.log('single sample set shape', single_sample_set.shape);
  var y = model.predict(single_sample_set, {batchSize: 1});
  console.log('predicted values (y)', y.dataSync());
  var y_arr  = Array.from(y.dataSync());
  document.getElementById('class34').innerHTML = y;
});